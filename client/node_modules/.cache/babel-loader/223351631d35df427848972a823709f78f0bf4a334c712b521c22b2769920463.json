{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cherry\\\\Desktop\\\\Calendar\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useCallback, useMemo } from \"react\"; // Added useMemo\nimport { Calendar, momentLocalizer, Views } from \"react-big-calendar\"; // Import Views\nimport moment from \"moment\";\n// import { useDispatch, useSelector } from \"react-redux\"\n// import { fetchEvents, createEvent, updateEvent, deleteEvent } from \"./redux/actions/eventActions\"\n// import { fetchGoals } from \"./redux/actions/goalActions\"\nimport EventModal from \"./components/EventModal\";\nimport Toolbar from \"./components/Toolbar\"; // <-- Import Toolbar\nimport GoalsSidebar from \"./components/GoalsSidebar\"; // <-- Import new Sidebar\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport \"./App.css\"; // Ensure layout styles are imported\n\n//Somechanges\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst localizer = momentLocalizer(moment);\nconst allViews = Object.keys(Views).map(k => Views[k]); // ['month', 'week', 'day', 'agenda']\n\nfunction App() {\n  _s();\n  // // Redux stuff - still learning how this works!\n  // const dispatch = useDispatch()\n  // const { events, loading: eventsLoading, error: eventsError } = useSelector((state) => state.events)\n\n  // Local state - lots of variables!\n  const [showModal, setShowModal] = useState(false);\n  const [modalData, setModalData] = useState(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [saveError, setSaveError] = useState(null);\n  const [draggedTask, setDraggedTask] = useState(null);\n\n  // --- New State for Navigation ---\n  const [currentDate, setCurrentDate] = useState(new Date()); // Today's date initially\n  const [currentView, setCurrentView] = useState(Views.MONTH); // Default view\n\n  // // Fetch events from Redux\n  // useEffect(() => {\n  //   // Load events when component mounts\n  //   dispatch(fetchEvents())\n  //   dispatch(fetchGoals())\n  // }, [dispatch])\n\n  // --- Modal Handlers ---\n  const handleSelectSlot = useCallback(({\n    start,\n    end\n  }) => {\n    // This runs when user clicks on an empty slot in calendar\n    setSaveError(null);\n    setModalData({\n      start,\n      end,\n      allDay: !start.getHours() && !start.getMinutes()\n    }); // Guess allDay based on slot\n    setIsEditing(false);\n    setShowModal(true);\n  }, []);\n  const handleSelectEvent = useCallback(event => {\n    // This runs when user clicks on an existing event\n    setSaveError(null);\n    setModalData(event);\n    setIsEditing(true);\n    setShowModal(true);\n  }, []);\n  const handleCloseModal = useCallback(() => {\n    // Close the modal and reset everything\n    setShowModal(false);\n    setModalData(null);\n    setIsEditing(false);\n    setSaveError(null);\n    setIsSaving(false);\n  }, []);\n\n  // Open modal for creation (triggered by Sidebar button)\n  const handleCreateClick = useCallback(() => {\n    // Create a new event starting now\n    const now = new Date();\n    setSaveError(null);\n    setModalData({\n      start: now,\n      end: moment(now).add(1, \"hour\").toDate(),\n      // Default 1 hour duration\n      allDay: false\n    });\n    setIsEditing(false);\n    setShowModal(true);\n  }, []);\n\n  // // --- Save/Delete Handlers ---\n  // const handleSaveEvent = async (eventDataFromModal) => {\n  //   // Save the event to the database\n  //   setIsSaving(true)\n  //   setSaveError(null)\n  //   try {\n  //     let savedEvent\n  //     if (isEditing && modalData?._id) {\n  //       // Update existing event\n  //       savedEvent = await dispatch(updateEvent(modalData._id, eventDataFromModal))\n  //     } else {\n  //       // Create new event\n  //       savedEvent = await dispatch(createEvent(eventDataFromModal))\n  //     }\n  //     handleCloseModal()\n  //   } catch (error) {\n  //     // Something went wrong!\n  //     console.error(\"Error saving event:\", error.response ? error.response.data : error)\n  //     setSaveError(error.response?.data?.msg || \"Could not save event.\")\n  //     setIsSaving(false)\n  //   }\n  // }\n\n  // const handleDeleteEvent = async (eventId) => {\n  //   // Delete an event from the database\n  //   if (!eventId) return\n  //   setIsSaving(true)\n  //   setSaveError(null)\n  //   try {\n  //     await dispatch(deleteEvent(eventId))\n  //     handleCloseModal()\n  //   } catch (error) {\n  //     // Something went wrong!\n  //     console.error(\"Error deleting event:\", error)\n  //     setSaveError(error.response?.data?.msg || \"Could not delete event.\")\n  //     setIsSaving(false)\n  //   }\n  // }\n\n  // --- Navigation Handlers ---\n  const handleNavigate = useCallback((newDate, view, action) => {\n    // This is called when user navigates to a different date\n    console.log(\"Navigate action:\", action, \" New Date:\", newDate);\n    setCurrentDate(newDate); // Update the date state\n  }, []);\n  const handleViewChange = useCallback(newView => {\n    // This is called when user changes the view (month, week, day)\n    console.log(\"View change:\", newView);\n    setCurrentView(newView); // Update the view state\n  }, []);\n\n  // Handler for \"Today\" button clicks (from Sidebar or Toolbar)\n  const goToToday = useCallback(() => {\n    // Go back to today's date\n    setCurrentDate(new Date()); // Set date state to now\n  }, []);\n\n  // --- Event Styling ---\n  const eventStyleGetter = useCallback(event => {\n    // This makes the events look pretty with different colors\n    const backgroundColor = event.color || \"#3174ad\";\n    return {\n      style: {\n        backgroundColor,\n        borderRadius: \"3px\",\n        opacity: 0.9,\n        color: \"white\",\n        border: \"0px\",\n        display: \"block\"\n      }\n    };\n  }, []);\n\n  // --- Toolbar Label Formatting ---\n  const toolbarLabel = useMemo(() => {\n    // This formats the date label in the toolbar\n    const date = moment(currentDate);\n    if (currentView === Views.MONTH) return date.format(\"MMMM YYYY\");\n    if (currentView === Views.WEEK) {\n      const startOfWeek = date.startOf(\"week\").format(\"MMM D\");\n      const endOfWeek = date.endOf(\"week\").format(\"MMM D, YYYY\");\n      return `${startOfWeek} â€“ ${endOfWeek}`;\n    }\n    if (currentView === Views.DAY) return date.format(\"dddd, MMMM D, YYYY\");\n    if (currentView === Views.AGENDA) return date.format(\"MMMM YYYY\") + \" Agenda\";\n    return \"\";\n  }, [currentDate, currentView]);\n\n  // --- Drag and Drop Handlers ---\n  const handleTaskDragStart = task => {\n    // When user starts dragging a task\n    setDraggedTask(task);\n  };\n  const handleCalendarDragOver = e => {\n    e.preventDefault(); // Allow drop\n  };\n  const handleCalendarDrop = e => {\n    // When user drops a task on the calendar\n    e.preventDefault();\n\n    // Get the task data\n    const taskData = JSON.parse(e.dataTransfer.getData(\"text/plain\"));\n    if (taskData.type === \"task\") {\n      // Get the drop coordinates relative to the calendar\n      const calendarRect = e.currentTarget.getBoundingClientRect();\n      const x = e.clientX - calendarRect.left;\n      const y = e.clientY - calendarRect.top;\n\n      // Calculate the date from the drop position\n      // This is a simplified approach - in a real app, you'd need to calculate\n      // the exact date and time based on the calendar's current view and layout\n      const now = new Date();\n\n      // Open the modal with pre-filled data\n      setSaveError(null);\n      setModalData({\n        title: taskData.name,\n        color: taskData.color,\n        start: now,\n        end: moment(now).add(1, \"hour\").toDate(),\n        allDay: false\n      });\n      setIsEditing(false);\n      setShowModal(true);\n    }\n  };\n\n  // // --- Event Resizing and Moving ---\n  // const handleEventResize = useCallback(\n  //   ({ event, start, end }) => {\n  //     // When user resizes an event\n  //     dispatch(updateEvent(event._id, { ...event, start, end }))\n  //   },\n  //   [dispatch],\n  // )\n\n  // const handleEventDrop = useCallback(\n  //   ({ event, start, end, allDay }) => {\n  //     // When user drags an event to a new time/date\n  //     dispatch(updateEvent(event._id, { ...event, start, end, allDay }))\n  //   },\n  //   [dispatch],\n  // )\n\n  return (\n    /*#__PURE__*/\n    // New Layout Structure\n    _jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(GoalsSidebar, {\n        onCreateClick: handleCreateClick,\n        onTodayClick: goToToday,\n        onTaskDragStart: handleTaskDragStart\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(Toolbar, {\n          date: currentDate,\n          view: currentView,\n          views: allViews // Pass available views\n          ,\n          label: toolbarLabel // Pass formatted label\n          ,\n          onNavigate: action => {\n            // Handle navigation actions from Toolbar buttons\n            if (action === \"TODAY\") goToToday();\n            // Let react-big-calendar handle PREV/NEXT internally via its onNavigate prop\n            else handleNavigate(currentDate, currentView, action); // Trigger internal navigation\n          },\n          onViewChange: handleViewChange // Pass view change handler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"calendar-container\",\n          onDragOver: handleCalendarDragOver,\n          onDrop: handleCalendarDrop,\n          children: /*#__PURE__*/_jsxDEV(Calendar, {\n            localizer: localizer\n            // events={events}\n            ,\n            startAccessor: \"start\",\n            endAccessor: \"end\",\n            allDayAccessor: \"allDay\",\n            style: {\n              height: \"100%\"\n            } // Let container control height\n            ,\n            selectable: true,\n            onSelectSlot: handleSelectSlot,\n            onSelectEvent: handleSelectEvent,\n            eventPropGetter: eventStyleGetter,\n            popup: true,\n            resizable: true\n            // onEventResize={handleEventResize}\n            // onEventDrop={handleEventDrop}\n            // --- Connect Navigation State ---\n            ,\n            view: currentView // Control the current view\n            ,\n            date: currentDate // Control the current date\n            ,\n            onNavigate: handleNavigate // Handle date changes\n            ,\n            onView: handleViewChange // Handle view changes\n            ,\n            views: allViews // Tell RBC the available views\n            // --- Disable RBC's built-in toolbar ---\n            ,\n            components: {\n              toolbar: () => null // Render nothing for the default toolbar\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 7\n      }, this), showModal && /*#__PURE__*/_jsxDEV(EventModal, {\n        event: isEditing ? modalData : null,\n        initialData: !isEditing ? modalData : null,\n        onClose: handleCloseModal\n        // onSave={handleSaveEvent}\n        // onDelete={isEditing ? handleDeleteEvent : undefined}\n        ,\n        isSaving: isSaving,\n        saveError: saveError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(App, \"z2zJOh++rooa9ZLY5B9cLGKXsLY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","useCallback","useMemo","Calendar","momentLocalizer","Views","moment","EventModal","Toolbar","GoalsSidebar","jsxDEV","_jsxDEV","localizer","allViews","Object","keys","map","k","App","_s","showModal","setShowModal","modalData","setModalData","isEditing","setIsEditing","isSaving","setIsSaving","saveError","setSaveError","draggedTask","setDraggedTask","currentDate","setCurrentDate","Date","currentView","setCurrentView","MONTH","handleSelectSlot","start","end","allDay","getHours","getMinutes","handleSelectEvent","event","handleCloseModal","handleCreateClick","now","add","toDate","handleNavigate","newDate","view","action","console","log","handleViewChange","newView","goToToday","eventStyleGetter","backgroundColor","color","style","borderRadius","opacity","border","display","toolbarLabel","date","format","WEEK","startOfWeek","startOf","endOfWeek","endOf","DAY","AGENDA","handleTaskDragStart","task","handleCalendarDragOver","e","preventDefault","handleCalendarDrop","taskData","JSON","parse","dataTransfer","getData","type","calendarRect","currentTarget","getBoundingClientRect","x","clientX","left","y","clientY","top","title","name","className","children","onCreateClick","onTodayClick","onTaskDragStart","fileName","_jsxFileName","lineNumber","columnNumber","views","label","onNavigate","onViewChange","onDragOver","onDrop","startAccessor","endAccessor","allDayAccessor","height","selectable","onSelectSlot","onSelectEvent","eventPropGetter","popup","resizable","onView","components","toolbar","initialData","onClose","_c","$RefreshReg$"],"sources":["C:/Users/Cherry/Desktop/Calendar/client/src/App.js"],"sourcesContent":["import { useState, useEffect, useCallback, useMemo } from \"react\" // Added useMemo\nimport { Calendar, momentLocalizer, Views } from \"react-big-calendar\" // Import Views\nimport moment from \"moment\"\n// import { useDispatch, useSelector } from \"react-redux\"\n// import { fetchEvents, createEvent, updateEvent, deleteEvent } from \"./redux/actions/eventActions\"\n// import { fetchGoals } from \"./redux/actions/goalActions\"\nimport EventModal from \"./components/EventModal\"\nimport Toolbar from \"./components/Toolbar\" // <-- Import Toolbar\nimport GoalsSidebar from \"./components/GoalsSidebar\" // <-- Import new Sidebar\nimport \"react-big-calendar/lib/css/react-big-calendar.css\"\nimport \"./App.css\" // Ensure layout styles are imported\n\n//Somechanges\n\nconst localizer = momentLocalizer(moment)\nconst allViews = Object.keys(Views).map((k) => Views[k]) // ['month', 'week', 'day', 'agenda']\n\nfunction App() {\n  // // Redux stuff - still learning how this works!\n  // const dispatch = useDispatch()\n  // const { events, loading: eventsLoading, error: eventsError } = useSelector((state) => state.events)\n\n  // Local state - lots of variables!\n  const [showModal, setShowModal] = useState(false)\n  const [modalData, setModalData] = useState(null)\n  const [isEditing, setIsEditing] = useState(false)\n  const [isSaving, setIsSaving] = useState(false)\n  const [saveError, setSaveError] = useState(null)\n  const [draggedTask, setDraggedTask] = useState(null)\n\n  // --- New State for Navigation ---\n  const [currentDate, setCurrentDate] = useState(new Date()) // Today's date initially\n  const [currentView, setCurrentView] = useState(Views.MONTH) // Default view\n\n  // // Fetch events from Redux\n  // useEffect(() => {\n  //   // Load events when component mounts\n  //   dispatch(fetchEvents())\n  //   dispatch(fetchGoals())\n  // }, [dispatch])\n\n  // --- Modal Handlers ---\n  const handleSelectSlot = useCallback(({ start, end }) => {\n    // This runs when user clicks on an empty slot in calendar\n    setSaveError(null)\n    setModalData({ start, end, allDay: !start.getHours() && !start.getMinutes() }) // Guess allDay based on slot\n    setIsEditing(false)\n    setShowModal(true)\n  }, [])\n\n  const handleSelectEvent = useCallback((event) => {\n    // This runs when user clicks on an existing event\n    setSaveError(null)\n    setModalData(event)\n    setIsEditing(true)\n    setShowModal(true)\n  }, [])\n\n  const handleCloseModal = useCallback(() => {\n    // Close the modal and reset everything\n    setShowModal(false)\n    setModalData(null)\n    setIsEditing(false)\n    setSaveError(null)\n    setIsSaving(false)\n  }, [])\n\n  // Open modal for creation (triggered by Sidebar button)\n  const handleCreateClick = useCallback(() => {\n    // Create a new event starting now\n    const now = new Date()\n    setSaveError(null)\n    setModalData({\n      start: now,\n      end: moment(now).add(1, \"hour\").toDate(), // Default 1 hour duration\n      allDay: false,\n    })\n    setIsEditing(false)\n    setShowModal(true)\n  }, [])\n\n  // // --- Save/Delete Handlers ---\n  // const handleSaveEvent = async (eventDataFromModal) => {\n  //   // Save the event to the database\n  //   setIsSaving(true)\n  //   setSaveError(null)\n  //   try {\n  //     let savedEvent\n  //     if (isEditing && modalData?._id) {\n  //       // Update existing event\n  //       savedEvent = await dispatch(updateEvent(modalData._id, eventDataFromModal))\n  //     } else {\n  //       // Create new event\n  //       savedEvent = await dispatch(createEvent(eventDataFromModal))\n  //     }\n  //     handleCloseModal()\n  //   } catch (error) {\n  //     // Something went wrong!\n  //     console.error(\"Error saving event:\", error.response ? error.response.data : error)\n  //     setSaveError(error.response?.data?.msg || \"Could not save event.\")\n  //     setIsSaving(false)\n  //   }\n  // }\n\n  // const handleDeleteEvent = async (eventId) => {\n  //   // Delete an event from the database\n  //   if (!eventId) return\n  //   setIsSaving(true)\n  //   setSaveError(null)\n  //   try {\n  //     await dispatch(deleteEvent(eventId))\n  //     handleCloseModal()\n  //   } catch (error) {\n  //     // Something went wrong!\n  //     console.error(\"Error deleting event:\", error)\n  //     setSaveError(error.response?.data?.msg || \"Could not delete event.\")\n  //     setIsSaving(false)\n  //   }\n  // }\n\n  // --- Navigation Handlers ---\n  const handleNavigate = useCallback((newDate, view, action) => {\n    // This is called when user navigates to a different date\n    console.log(\"Navigate action:\", action, \" New Date:\", newDate)\n    setCurrentDate(newDate) // Update the date state\n  }, [])\n\n  const handleViewChange = useCallback((newView) => {\n    // This is called when user changes the view (month, week, day)\n    console.log(\"View change:\", newView)\n    setCurrentView(newView) // Update the view state\n  }, [])\n\n  // Handler for \"Today\" button clicks (from Sidebar or Toolbar)\n  const goToToday = useCallback(() => {\n    // Go back to today's date\n    setCurrentDate(new Date()) // Set date state to now\n  }, [])\n\n  // --- Event Styling ---\n  const eventStyleGetter = useCallback((event) => {\n    // This makes the events look pretty with different colors\n    const backgroundColor = event.color || \"#3174ad\"\n    return {\n      style: { backgroundColor, borderRadius: \"3px\", opacity: 0.9, color: \"white\", border: \"0px\", display: \"block\" },\n    }\n  }, [])\n\n  // --- Toolbar Label Formatting ---\n  const toolbarLabel = useMemo(() => {\n    // This formats the date label in the toolbar\n    const date = moment(currentDate)\n    if (currentView === Views.MONTH) return date.format(\"MMMM YYYY\")\n    if (currentView === Views.WEEK) {\n      const startOfWeek = date.startOf(\"week\").format(\"MMM D\")\n      const endOfWeek = date.endOf(\"week\").format(\"MMM D, YYYY\")\n      return `${startOfWeek} â€“ ${endOfWeek}`\n    }\n    if (currentView === Views.DAY) return date.format(\"dddd, MMMM D, YYYY\")\n    if (currentView === Views.AGENDA) return date.format(\"MMMM YYYY\") + \" Agenda\"\n    return \"\"\n  }, [currentDate, currentView])\n\n  // --- Drag and Drop Handlers ---\n  const handleTaskDragStart = (task) => {\n    // When user starts dragging a task\n    setDraggedTask(task)\n  }\n\n  const handleCalendarDragOver = (e) => {\n    e.preventDefault() // Allow drop\n  }\n\n  const handleCalendarDrop = (e) => {\n    // When user drops a task on the calendar\n    e.preventDefault()\n\n    // Get the task data\n    const taskData = JSON.parse(e.dataTransfer.getData(\"text/plain\"))\n\n    if (taskData.type === \"task\") {\n      // Get the drop coordinates relative to the calendar\n      const calendarRect = e.currentTarget.getBoundingClientRect()\n      const x = e.clientX - calendarRect.left\n      const y = e.clientY - calendarRect.top\n\n      // Calculate the date from the drop position\n      // This is a simplified approach - in a real app, you'd need to calculate\n      // the exact date and time based on the calendar's current view and layout\n      const now = new Date()\n\n      // Open the modal with pre-filled data\n      setSaveError(null)\n      setModalData({\n        title: taskData.name,\n        color: taskData.color,\n        start: now,\n        end: moment(now).add(1, \"hour\").toDate(),\n        allDay: false,\n      })\n      setIsEditing(false)\n      setShowModal(true)\n    }\n  }\n\n  // // --- Event Resizing and Moving ---\n  // const handleEventResize = useCallback(\n  //   ({ event, start, end }) => {\n  //     // When user resizes an event\n  //     dispatch(updateEvent(event._id, { ...event, start, end }))\n  //   },\n  //   [dispatch],\n  // )\n\n  // const handleEventDrop = useCallback(\n  //   ({ event, start, end, allDay }) => {\n  //     // When user drags an event to a new time/date\n  //     dispatch(updateEvent(event._id, { ...event, start, end, allDay }))\n  //   },\n  //   [dispatch],\n  // )\n\n  return (\n    // New Layout Structure\n    <div className=\"app-container\">\n      {/* Sidebar */}\n      <GoalsSidebar onCreateClick={handleCreateClick} onTodayClick={goToToday} onTaskDragStart={handleTaskDragStart} />\n\n      {/* Main Content Area */}\n      <div className=\"main-content\">\n        {/* Display global loading/error indicators */}\n        {/*eventsLoading && <p className=\"loading-indicator\">Loading events...</p>}\n        {eventsError && !showModal && <p className=\"global-error\">{eventsError}</p>}\n        {saveError && !showModal && <p className=\"global-error\">{saveError}</p>*/}\n\n        {/* Custom Toolbar */}\n        <Toolbar\n          date={currentDate}\n          view={currentView}\n          views={allViews} // Pass available views\n          label={toolbarLabel} // Pass formatted label\n          onNavigate={(action) => {\n            // Handle navigation actions from Toolbar buttons\n            if (action === \"TODAY\") goToToday()\n            // Let react-big-calendar handle PREV/NEXT internally via its onNavigate prop\n            else handleNavigate(currentDate, currentView, action) // Trigger internal navigation\n          }}\n          onViewChange={handleViewChange} // Pass view change handler\n        />\n\n        {/* Calendar Area */}\n        <div className=\"calendar-container\" onDragOver={handleCalendarDragOver} onDrop={handleCalendarDrop}>\n          <Calendar\n            localizer={localizer}\n            // events={events}\n            startAccessor=\"start\"\n            endAccessor=\"end\"\n            allDayAccessor=\"allDay\"\n            style={{ height: \"100%\" }} // Let container control height\n            selectable={true}\n            onSelectSlot={handleSelectSlot}\n            onSelectEvent={handleSelectEvent}\n            eventPropGetter={eventStyleGetter}\n            popup\n            resizable\n            // onEventResize={handleEventResize}\n            // onEventDrop={handleEventDrop}\n            // --- Connect Navigation State ---\n            view={currentView} // Control the current view\n            date={currentDate} // Control the current date\n            onNavigate={handleNavigate} // Handle date changes\n            onView={handleViewChange} // Handle view changes\n            views={allViews} // Tell RBC the available views\n            // --- Disable RBC's built-in toolbar ---\n            components={{\n              toolbar: () => null, // Render nothing for the default toolbar\n            }}\n          />\n        </div>\n      </div>\n\n      {/* Event Modal (Rendered top-level for stacking context) */}\n      {showModal && (\n        <EventModal\n          event={isEditing ? modalData : null}\n          initialData={!isEditing ? modalData : null}\n          onClose={handleCloseModal}\n          // onSave={handleSaveEvent}\n          // onDelete={isEditing ? handleDeleteEvent : undefined}\n          isSaving={isSaving}\n          saveError={saveError}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default App\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}